From a908a3de2110f9b4e95e4d0a5ec44e038b339a2a Mon Sep 17 00:00:00 2001
From: ronan <ronan.lemartret@iot.bzh>
Date: Thu, 29 Oct 2020 17:33:26 +0100
Subject: [PATCH] Revert "fs: prevent overwriting reserved memory"

This reverts commit aa3c609e2be5a837e7b81e308d47f55b67666bd6.
---
 fs/fs.c       | 55 +++------------------------------------------------
 include/lmb.h |  1 -
 2 files changed, 3 insertions(+), 53 deletions(-)

diff --git a/fs/fs.c b/fs/fs.c
index 0c66d60477..d69b610cd4 100644
--- a/fs/fs.c
+++ b/fs/fs.c
@@ -457,56 +457,13 @@ int fs_size(const char *filename, loff_t *size)
 	return ret;
 }
 
-#ifdef CONFIG_LMB
-/* Check if a file may be read to the given address */
-static int fs_read_lmb_check(const char *filename, ulong addr, loff_t offset,
-			     loff_t len, struct fstype_info *info)
-{
-	struct lmb lmb;
-	int ret;
-	loff_t size;
-	loff_t read_len;
-
-	/* get the actual size of the file */
-	ret = info->size(filename, &size);
-	if (ret)
-		return ret;
-	if (offset >= size) {
-		/* offset >= EOF, no bytes will be written */
-		return 0;
-	}
-	read_len = size - offset;
-
-	/* limit to 'len' if it is smaller */
-	if (len && len < read_len)
-		read_len = len;
-
-	lmb_init_and_reserve(&lmb, gd->bd, (void *)gd->fdt_blob);
-	lmb_dump_all(&lmb);
-
-	if (lmb_alloc_addr(&lmb, addr, read_len) == addr)
-		return 0;
-
-	printf("** Reading file would overwrite reserved memory **\n");
-	return -ENOSPC;
-}
-#endif
-
-static int _fs_read(const char *filename, ulong addr, loff_t offset, loff_t len,
-		    int do_lmb_check, loff_t *actread)
+int fs_read(const char *filename, ulong addr, loff_t offset, loff_t len,
+	    loff_t *actread)
 {
 	struct fstype_info *info = fs_get_info(fs_type);
 	void *buf;
 	int ret;
 
-#ifdef CONFIG_LMB
-	if (do_lmb_check) {
-		ret = fs_read_lmb_check(filename, addr, offset, len, info);
-		if (ret)
-			return ret;
-	}
-#endif
-
 	/*
 	 * We don't actually know how many bytes are being read, since len==0
 	 * means read the whole file.
@@ -523,12 +480,6 @@ static int _fs_read(const char *filename, ulong addr, loff_t offset, loff_t len,
 	return ret;
 }
 
-int fs_read(const char *filename, ulong addr, loff_t offset, loff_t len,
-	    loff_t *actread)
-{
-	return _fs_read(filename, addr, offset, len, 0, actread);
-}
-
 int fs_write(const char *filename, ulong addr, loff_t offset, loff_t len,
 	     loff_t *actwrite)
 {
@@ -717,7 +668,7 @@ int do_load(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 			(argc > 4) ? argv[4] : "");
 #endif
 	time = get_timer(0);
-	ret = _fs_read(filename, addr, pos, bytes, 1, &len_read);
+	ret = fs_read(filename, addr, pos, bytes, &len_read);
 	time = get_timer(time);
 	if (ret < 0)
 		return 1;
diff --git a/include/lmb.h b/include/lmb.h
index 3b338dfee0..bb1da5a688 100644
--- a/include/lmb.h
+++ b/include/lmb.h
@@ -31,7 +31,6 @@ struct lmb {
 };
 
 extern void lmb_init(struct lmb *lmb);
-extern void lmb_init_and_reserve(struct lmb *lmb, bd_t *bd, void *fdt_blob);
 extern void lmb_init_and_reserve_range(struct lmb *lmb, phys_addr_t base,
 				       phys_size_t size, void *fdt_blob);
 extern long lmb_add(struct lmb *lmb, phys_addr_t base, phys_size_t size);
-- 
2.26.2

